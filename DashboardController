package javafxapplication24;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.animation.AnimationTimer;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.scene.Scene;
import static javafx.scene.paint.Color.color;

public class DashboardController implements Initializable {

    @FXML
    private Button startButton;

    private Canvas canvas;
    private static final int TILE_SIZE = 30;
    private static final int WIDTH = 10, HEIGHT = 20;
    private static final int[][] GRID = new int[WIDTH][HEIGHT];
    private static int score = 0;
    private boolean gameOver = false;

    private BasePiece currentPiece;
    private double pieceY = 0;
    private double dropSpeed = 0.05;

    @FXML
    void mouseEnter(MouseEvent event) {
        startButton.setStyle("-fx-background-color: linear-gradient(to bottom, #ff3565, #ff7eb3); -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 10;");
    }

    @FXML
    void mouseExit(MouseEvent event) {
        startButton.setStyle("-fx-background-color: linear-gradient(to bottom, #ff7eb3, #ff758c); -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 10;");
    }

    @FXML
    private void berangkat(ActionEvent event) {
        Stage stage = (Stage) startButton.getScene().getWindow();
        start(stage); 
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        canvas = new Canvas(WIDTH * TILE_SIZE, HEIGHT * TILE_SIZE);
    }

    public void start(Stage stage) {
        VBox root = new VBox();
        root.getChildren().add(canvas);

        GraphicsContext gc = canvas.getGraphicsContext2D();
        Scene scene = new Scene(root);
        stage.setTitle("Tetris Game");
        stage.setScene(scene);
        stage.show();

        startNewPiece();

        new AnimationTimer() {
            long lastTick = System.nanoTime();

            @Override
            public void handle(long now) {
                double elapsedTime = (now - lastTick) / 1e9; // Seconds
                lastTick = now;
                tick(gc, elapsedTime);
            }
        }.start();

        scene.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.LEFT) {
                move(-1);
            } else if (event.getCode() == KeyCode.RIGHT) {
                move(1);
            } else if (event.getCode() == KeyCode.DOWN) {
                dropFaster();
            } else if (event.getCode() ==  KeyCode.UP){
                iRotate = true;
                currentPiece.rotate();
            }
        });

        scene.setOnKeyReleased(event -> {
            if (event.getCode() == KeyCode.DOWN) {
                resetDropSpeed();
            }
        });
    }

private void startNewPiece() {
    currentPiece = new SquarePiece();
    pieceY = currentPiece.getY();
if (!canMove(currentPiece, 0, 0)) {
    gameOver = true;
    showAlert(Alert.AlertType.ERROR, "Game Over", "No space to place a new piece. Game Over!");
    return;
    }
}

    private boolean canMove(BasePiece piece, int dx, int dy) {
        for (int i = 0; i < piece.getShape().length; i++) {
            for (int j = 0; j < piece.getShape()[i].length; j++) {
                if (piece.getShape()[i][j] == 1) {
                    int newX = piece.getX() + j + dx;
                    int newY = piece.getY() + i + dy;
                    if (newX < 0 || newX >= WIDTH || newY >= HEIGHT || GRID[newX][newY] == 1) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

   private void drawGameOverScreen(GraphicsContext gc) {
        gc.setFill(Color.BLACK);
        gc.fillRect(0, 0, WIDTH * TILE_SIZE, HEIGHT * TILE_SIZE);
        gc.setFill(Color.RED);
        gc.setFont(new Font("Arial", 35));
        gc.fillText("GAME OVER", WIDTH * TILE_SIZE / 8, HEIGHT * TILE_SIZE / 4);
        gc.setFont(new Font("Arial", 20));
        gc.fillText("Score: " + score, WIDTH * TILE_SIZE / 3, HEIGHT * TILE_SIZE / 2 + 50);
    }

    private void tick(GraphicsContext gc, double elapsedTime) {
        if (gameOver) {
            drawGameOverScreen(gc);
            return;
        }

        pieceY += dropSpeed;
        if (pieceY >= currentPiece.getY() + 1) {
            drop();
        }
        drawGrid(gc);
        currentPiece.draw(gc, pieceY);
    }

    private void drawGrid(GraphicsContext gc) {
        gc.setFill(Color.BLACK);
        gc.fillRect(0, 0, WIDTH * TILE_SIZE, HEIGHT * TILE_SIZE);
        gc.setFill(Color.WHITE);
        gc.setFont(new Font("", 20));
        gc.fillText("Score: " + score, 10, 20);

        for (int x = 0; x < WIDTH; x++) {
            for (int y = 0; y < HEIGHT; y++) {
                if (GRID[x][y] == 1) {
                    gc.setFill(Color.BLUE);
                    gc.fillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                }
            }
        }
    }

    private void move(int direction) {
        if (canMove(currentPiece, direction, 0)) {
            currentPiece.move(direction);
        }
    }

    private void drop() {
        if (canMove(currentPiece, 0, 1)) {
            currentPiece.drop();
        } else {
            placePiece();
            startNewPiece();
        }
        pieceY = currentPiece.getY(); 
    }

    private void dropFaster() {
        dropSpeed = 0.2; 
    }

    private void resetDropSpeed() {
        dropSpeed = 0.05; 
    }

    private void checkGameOverCondition() {
        
        for (int x = 0; x < WIDTH; x++) {
            if (GRID[x][0] == 1) { 
                gameOver = true;
                showAlert(Alert.AlertType.ERROR, "Game Over", "The top row is full. Game Over!");
                break;
            }
        }
    }
    
    private void placePiece() {
        for (int i = 0; i < currentPiece.getShape().length; i++) {
            for (int j = 0; j < currentPiece.getShape()[i].length; j++) {
                if (currentPiece.getShape()[i][j] == 1) {
                    GRID[currentPiece.getX() + j][currentPiece.getY() + i] = 1;
                }
            }
        }
        checkGameOverCondition();
        clearLines();
    }

private void clearLines() {
        for (int y = HEIGHT - 1; y >= 0; y--) {
            boolean fullLine = true;
            for (int x = 0; x < WIDTH; x++) {
                if (GRID[x][y] == 0) {
                    fullLine = false;
                    break;
                }
            }
            if (fullLine) {
                for (int ty = y; ty > 0; ty--) {
                    for (int tx = 0; tx < WIDTH; tx++) {
                        GRID[tx][ty] = GRID[tx][ty - 1];
                    }
                }
                y++;
                score += 100;
            }
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }
    abstract class BasePiece {
        protected int[][] shape;
        protected int x, y;
        protected Color color;

        public BasePiece(int[][] shape) {
            this.shape = shape;
            this.x = WIDTH / 2 - shape[0].length / 2;
            this.y = 0;
        }

        public int[][] getShape() {
            return shape;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public void move(int dx) {
            x += dx;
        }

        public void drop() {
            y += 1;
        }

        public abstract void rotate();

        public void draw(GraphicsContext gc, double smoothY) {
            if(iRotate){
                gc.setFill(color);
            }else {
                gc.setFill(Color.RED);
            }

            for (int i = 0; i < shape.length; i++) {
                for (int j = 0; j < shape[i].length; j++) {
                    if (shape[i][j] == 1) {
                        gc.fillRect((x + j) * TILE_SIZE, (smoothY + i) * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                    }
                }
            }
        }
    }

    class SquarePiece extends BasePiece {
        public SquarePiece() {
            super(new int[][]{
                {1, 1},
                {1, 1}
            });
        }

        @Override
        public void rotate() {
            this.color = getRandomColor();
        }
    }
}
